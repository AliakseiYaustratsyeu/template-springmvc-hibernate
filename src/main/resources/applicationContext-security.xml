<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd	http://www.springframework.org/schema/security	http://www.springframework.org/schema/security/spring-security-3.0.xsd">    <global-method-security pre-post-annotations="enabled"/>    <http auto-config="true">        <intercept-url pattern="/login.do" requires-channel="https" access="IS_AUTHENTICATED_ANONYMOUSLY" />        <intercept-url pattern="/registration.do" requires-channel="https" access="ROLE_ANONYMOUS,ROLE_ADMIN,ROLE_USER" />        <intercept-url pattern="/profile.do" access="ROLE_USER,ROLE_ADMIN" />        <intercept-url pattern="/administration/**" access="ROLE_ADMIN" />        <intercept-url pattern="/welcome.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />         <intercept-url pattern="/home.do" access="ROLE_USER,ROLE_ADMIN" />                <intercept-url pattern="/about.do" access="ROLE_USER,ROLE_ADMIN" />        <intercept-url pattern="/feedback.do" access="ROLE_USER,ROLE_ADMIN" />        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />        <form-login login-page="/login.do" default-target-url="/home.do" authentication-failure-url="/login.do?error=true" />        <remember-me key="stepByStepToPro" token-validity-seconds="3600" data-source-ref="dataSource"/>        <logout logout-success-url="/login.do" />        <port-mappings>            <port-mapping http="8081" https="8443"/>        </port-mappings>        <session-management session-fixation-protection="migrateSession" invalid-session-url="/login.do?sessiontimeout=true">            <concurrency-control max-sessions="1" expired-url="/login.do?sessioninvalidated=true"/>        </session-management>        <access-denied-handler error-page="/accessDenied.do"/>    </http>    <authentication-manager alias="authenticationManager">         <authentication-provider user-service-ref="userService" >            <password-encoder ref="passwordEncoder">                <salt-source ref="saltSource"/>            </password-encoder>                    </authentication-provider>    </authentication-manager>    <!--          http://stackoverflow.com/questions/5481879/error-using-spring-authorize-tag-to-check-to-see-if-user-is-logged-in                  Setting use-expressions="true" in the http element will work          but means all your security settings in both Java code and          security contexts must use expression notations. This can be a problem          if you are currently using the standard security notations.          To use both expressions and standard notations just declare          a new bean in your security context like so -->    <beans:bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>    <!--     <beans:bean id="userCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">        <beans:property name="cache" ref="userEhCache" />    </beans:bean>    <beans:bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">        <beans:property name="cacheManager" ref="cacheManager" />        <beans:property name="cacheName" value="userCache" />    </beans:bean>  -->         <beans:bean id="passwordEncoder"  class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>        <beans:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">        <!-- beans:property name="userPropertyToUse" value="username" /-->        <!-- We generate salt values in database with a trigger when we insert data into table. -->        <beans:property name="userPropertyToUse" value="salt" />    </beans:bean></beans:beans>