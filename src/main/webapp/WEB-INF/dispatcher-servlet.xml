<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> <property name="cacheSeconds" 
        value="0" /> <property name="webBindingInitializer"> <bean class="com.apress.springrecipes.court.web.ReservationBindingInitializer"/> 
        </property> </bean -->

    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />

    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">
                    dataAccessFailure
                </prop>
            </props>
        </property>
        <property name="defaultErrorView" value="error" />
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="ApplicationResources" />
        <property name="useCodeAsDefaultMessage" value="true" />
    </bean>

    <!-- Activates scanning of @Repository and @Service -->
    <context:component-scan base-package="com.stepbysteptopro.template" />

    <!-- Configures the @Controller programming model -->
    <mvc:annotation-driven />

    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
    </mvc:interceptors>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="en" />
    </bean>


	<!-- Tiles View Resolver which runs the first. (order=1) -->
    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="order" value="1"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
    </bean>

    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles-defs.xml</value>
            </list>
        </property>
    </bean>
    
    <!-- View Resolver for JSPs which runs the second. (order=2)  -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="2"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- Convenient way to map URLs to JSPs w/o having a Controller -->
    <mvc:view-controller path="/login.do" view-name=".login" />
    <mvc:view-controller path="/welcome.do" view-name=".welcome" />
    <mvc:view-controller path="/home.do" view-name=".home" />
    <mvc:view-controller path="/profile.do" view-name=".profile" />
    <mvc:view-controller path="/about.do" view-name=".about" />
    <mvc:view-controller path="/feedback.do" view-name=".feedback" />
    
    <util:properties id="applicationProps" location="classpath:application.properties"/>
    <!-- This tag (mvc:resources) allows static resource requests following a particular URL pattern 
         to be served by a ResourceHttpRequestHandler from any of a list of Resource locations. 
         This provides a convenient way to serve static resources from locations other 
         than the web application root, including locations on the classpath. 
         The cache-period property may be used to set far future expiration headers 
         (1 year is the recommendation of optimization tools such as Page Speed and YSlow) 
         so that they will be more efficiently utilized by the client. 
         See http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html -->
    <mvc:resources mapping="/resources-#{applicationProps['application.version']}/**" location="/resources/" cache-period="31556926"/>
</beans>
